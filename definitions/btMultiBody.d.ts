
            declare namespace Ammo { 

                export class btMultiBody { 

                    constructor( n_links?: number, mass?: any, inertia?: btVector3, fixedBase?: boolean, canSleep?: boolean, multiDof?: boolean ); 

                    m_baseCollider: btMultiBodyLinkCollider; 
m_baseName: any; 
m_basePos: btVector3; 
m_baseQuat: btQuaternion; 
m_baseMass: any; 
m_baseInertia: btVector3; 
m_baseForce: btVector3; 
m_baseTorque: btVector3; 
m_baseConstraintForce: btVector3; 
m_baseConstraintTorque: btVector3; 
m_links: any; 
m_colliders: any; 
m_deltaV: any; 
m_realBuf: any; 
m_vectorBuf: any; 
m_matrixBuf: any; 
m_cachedInertiaTopLeft: btMatrix3x3; 
m_cachedInertiaTopRight: btMatrix3x3; 
m_cachedInertiaLowerLeft: btMatrix3x3; 
m_cachedInertiaLowerRight: btMatrix3x3; 
m_fixedBase: boolean; 
m_awake: boolean; 
m_canSleep: boolean; 
m_sleepTimer: any; 
m_companionId: number; 
m_linearDamping: any; 
m_angularDamping: any; 
m_useGyroTerm: boolean; 
m_maxAppliedImpulse: any; 
m_maxCoordinateVelocity: any; 
m_hasSelfCollision: boolean; 
m_isMultiDof: boolean; 
__posUpdated: boolean; 
m_dofCount: number; 
m_posVarCnt: number; 
m_useRK4: boolean; 
m_useGlobalVelocities: boolean; 
m_internalNeedsJointFeedback: boolean; 
 

                    BT_DECLARE_ALIGNED_ALLOCATOR(  ): any; 
setupFixed( linkIndex?: number, mass?: any, inertia?: btVector3, parent?: number, rotParentToThis?: btQuaternion, parentComToThisPivotOffset?: btVector3, thisPivotToThisComOffset?: btVector3, disableParentCollision?: boolean ): void; 
setupPrismatic( i?: number, mass?: any, inertia?: btVector3, parent?: number, rotParentToThis?: btQuaternion, jointAxis?: btVector3, parentComToThisPivotOffset?: btVector3, thisPivotToThisComOffset?: btVector3, disableParentCollision?: boolean ): void; 
setupRevolute( linkIndex?: number, mass?: any, inertia?: btVector3, parentIndex?: number, rotParentToThis?: btQuaternion, jointAxis?: btVector3, parentComToThisPivotOffset?: btVector3, thisPivotToThisComOffset?: btVector3, disableParentCollision?: boolean ): void; 
setupSpherical( linkIndex?: number, mass?: any, inertia?: btVector3, parent?: number, rotParentToThis?: btQuaternion, parentComToThisPivotOffset?: btVector3, thisPivotToThisComOffset?: btVector3, disableParentCollision?: boolean ): void; 
setupPlanar( i?: number, mass?: any, inertia?: btVector3, parent?: number, rotParentToThis?: btQuaternion, rotationAxis?: btVector3, parentComToThisComOffset?: btVector3, disableParentCollision?: boolean ): void; 
getLink( index?: number ): btMultibodyLink; 
getLink( index?: number ): btMultibodyLink; 
setBaseCollider( collider?: btMultiBodyLinkCollider ): void; 
getBaseCollider(  ): btMultiBodyLinkCollider; 
getBaseCollider(  ): btMultiBodyLinkCollider; 
getParent( link_num?: number ): number; 
getNumLinks(  ): number; 
getNumDofs(  ): number; 
getNumPosVars(  ): number; 
getBaseMass(  ): any; 
getBaseInertia(  ): btVector3; 
getLinkMass( i?: number ): any; 
getLinkInertia( i?: number ): btVector3; 
setBaseMass( mass?: any ): void; 
setBaseInertia( inertia?: btVector3 ): void; 
getBasePos(  ): btVector3; 
getBaseVel(  ): btVector3; 
getWorldToBaseRot(  ): btQuaternion; 
getBaseOmega(  ): btVector3; 
setBasePos( pos?: btVector3 ): void; 
setBaseWorldTransform( tr?: btTransform ): void; 
getBaseWorldTransform(  ): btTransform; 
setBaseVel( vel?: btVector3 ): void; 
setWorldToBaseRot( rot?: btQuaternion ): void; 
setBaseOmega( omega?: btVector3 ): void; 
getJointPos( i?: number ): any; 
getJointVel( i?: number ): any; 
getJointVelMultiDof( i?: number ): any; 
getJointPosMultiDof( i?: number ): any; 
getJointVelMultiDof( i?: number ): any; 
getJointPosMultiDof( i?: number ): any; 
setJointPos( i?: number, q?: any ): void; 
setJointVel( i?: number, qdot?: any ): void; 
setJointPosMultiDof( i?: number, q?: any ): void; 
setJointVelMultiDof( i?: number, qdot?: any ): void; 
getVelocityVector(  ): any; 
getRVector( i?: number ): btVector3; 
getParentToLocalRot( i?: number ): btQuaternion; 
localPosToWorld( i?: number, vec?: btVector3 ): btVector3; 
localDirToWorld( i?: number, vec?: btVector3 ): btVector3; 
worldPosToLocal( i?: number, vec?: btVector3 ): btVector3; 
worldDirToLocal( i?: number, vec?: btVector3 ): btVector3; 
getKineticEnergy(  ): any; 
getAngularMomentum(  ): btVector3; 
clearForcesAndTorques(  ): void; 
clearConstraintForces(  ): void; 
clearVelocities(  ): void; 
addBaseForce( f?: btVector3 ): void; 
addBaseTorque( t?: btVector3 ): void; 
addLinkForce( i?: number, f?: btVector3 ): void; 
addLinkTorque( i?: number, t?: btVector3 ): void; 
addBaseConstraintForce( f?: btVector3 ): void; 
addBaseConstraintTorque( t?: btVector3 ): void; 
addLinkConstraintForce( i?: number, f?: btVector3 ): void; 
addLinkConstraintTorque( i?: number, t?: btVector3 ): void; 
addJointTorque( i?: number, Q?: any ): void; 
addJointTorqueMultiDof( i?: number, dof?: number, Q?: any ): void; 
addJointTorqueMultiDof( i?: number, Q?: any ): void; 
getBaseForce(  ): btVector3; 
getBaseTorque(  ): btVector3; 
getLinkForce( i?: number ): btVector3; 
getLinkTorque( i?: number ): btVector3; 
getJointTorque( i?: number ): any; 
getJointTorqueMultiDof( i?: number ): any; 
stepVelocities( dt?: any, scratch_r?: any, scratch_v?: any, scratch_m?: any ): void; 
stepVelocitiesMultiDof( dt?: any, scratch_r?: any, scratch_v?: any, scratch_m?: any, isConstraintPass?: boolean ): void; 
calcAccelerationDeltas( force?: any, output?: any, scratch_r?: any, scratch_v?: any ): void; 
calcAccelerationDeltasMultiDof( force?: any, output?: any, scratch_r?: any, scratch_v?: any ): void; 
applyDeltaVee( delta_vee?: any ): void; 
applyDeltaVee( delta_vee?: any, multiplier?: any ): void; 
applyDeltaVeeMultiDof2( delta_vee?: any, multiplier?: any ): void; 
processDeltaVeeMultiDof2(  ): void; 
applyDeltaVeeMultiDof( delta_vee?: any, multiplier?: any ): void; 
stepPositions( dt?: any ): void; 
stepPositionsMultiDof( dt?: any, pq?: any, pqd?: any ): void; 
fillContactJacobian( link?: number, contact_point?: btVector3, normal?: btVector3, jac?: any, scratch_r?: any, scratch_v?: any, scratch_m?: any ): void; 
fillContactJacobianMultiDof( link?: number, contact_point?: btVector3, normal?: btVector3, jac?: any, scratch_r?: any, scratch_v?: any, scratch_m?: any ): void; 
filConstraintJacobianMultiDof( link?: number, contact_point?: btVector3, normal_ang?: btVector3, normal_lin?: btVector3, jac?: any, scratch_r?: any, scratch_v?: any, scratch_m?: any ): void; 
setCanSleep( canSleep?: boolean ): void; 
getCanSleep(  ): boolean; 
isAwake(  ): boolean; 
wakeUp(  ): void; 
goToSleep(  ): void; 
checkMotionAndSleepIfRequired( timestep?: any ): void; 
hasFixedBase(  ): boolean; 
getCompanionId(  ): number; 
setCompanionId( id?: number ): void; 
setNumLinks( numLinks?: number ): void; 
getLinearDamping(  ): any; 
setLinearDamping( damp?: any ): void; 
getAngularDamping(  ): any; 
setAngularDamping( damp?: any ): void; 
getUseGyroTerm(  ): boolean; 
setUseGyroTerm( useGyro?: boolean ): void; 
getMaxCoordinateVelocity(  ): any; 
setMaxCoordinateVelocity( maxVel?: any ): void; 
getMaxAppliedImpulse(  ): any; 
setMaxAppliedImpulse( maxImp?: any ): void; 
setHasSelfCollision( hasSelfCollision?: boolean ): void; 
hasSelfCollision(  ): boolean; 
isMultiDof(  ): boolean; 
finalizeMultiDof(  ): void; 
useRK4Integration( use?: boolean ): void; 
isUsingRK4Integration(  ): boolean; 
useGlobalVelocities( use?: boolean ): void; 
isUsingGlobalVelocities(  ): boolean; 
isPosUpdated(  ): boolean; 
setPosUpdated( updated?: boolean ): void; 
internalNeedsJointFeedback(  ): boolean; 
forwardKinematics( scratch_q?: any, scratch_m?: any ): void; 
updateCollisionObjectWorldTransforms( scratch_q?: any, scratch_m?: any ): void; 
calculateSerializeBufferSize(  ): number; 
serialize( dataBuffer?: void, serializer?: btSerializer ): any; 
getBaseName(  ): any; 
setBaseName( name?: string ): void; 
compTreeLinkVelocities( omega?: btVector3, vel?: btVector3 ): void; 
solveImatrix( rhs_top?: btVector3, rhs_bot?: btVector3, result?: number ): void; 
solveImatrix( rhs?: btSpatialForceVector, result?: btSpatialMotionVector ): void; 
updateLinksDofOffsets(  ): void; 
mulMatrix( pA?: any, pB?: any, rowsA?: number, colsA?: number, rowsB?: number, colsB?: number, pC?: any ): void; 
 

                } 

            }
        